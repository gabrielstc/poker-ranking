// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Club {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logo        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  users          User[]
  players        Player[]
  tournaments    Tournament[]

  @@map("clubs")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(CLUB_ADMIN)
  clubId    String?  // null para super-admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com clube (opcional para super-admin)
  club Club? @relation(fields: [clubId], references: [id], onDelete: Cascade)

  @@map("users")
}

model Player {
  id        String   @id @default(cuid())
  name      String
  nickname  String   
  email     String?
  phone     String?
  clubId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  club           Club                      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  participations TournamentParticipation[]

  @@unique([nickname, clubId]) // nickname único por clube
  @@map("players")
}

model Tournament {
  id          String   @id @default(cuid())
  name        String
  date        DateTime
  buyIn       Float?
  description String?
  status      TournamentStatus @default(UPCOMING)
  type        TournamentType   @default(EXPONENCIAL)
  clubId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  club           Club                      @relation(fields: [clubId], references: [id], onDelete: Cascade)
  participations TournamentParticipation[]

  @@map("tournaments")
}

model TournamentParticipation {
  id           String @id @default(cuid())
  playerId     String
  tournamentId String
  position     Int?   // Posição final no torneio (1º, 2º, 3º, etc.)
  points       Float? // Pontos obtidos (com até 1 casa decimal)
  prize        Float? // Prêmio em dinheiro
  eliminated   Boolean @default(false)
  eliminatedAt DateTime?

  // Relacionamentos
  player     Player     @relation(fields: [playerId], references: [id], onDelete: Cascade)
  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([playerId, tournamentId])
  @@map("tournament_participations")
}

enum TournamentStatus {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TournamentType {
  FIXO
  EXPONENCIAL
}

enum UserRole {
  SUPER_ADMIN
  CLUB_ADMIN
}
